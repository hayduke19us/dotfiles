execute pathogen#infect()

" =-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
" BASIC OPTIONS
" =-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
set nocompatible          " Make vim behave better than vi-compatible mode
set wildmenu              " Use status line to show auto-complete & more
set cpoptions=aABceFsWZ   " Set various compatible options
set wildignore+=*.png,*.jpg,*.gif,*.ai,*.jpeg,*.psd,*.swp,*.jar,*.zip,*.gem,.DS_Store,log/**,tmp/**,coverage/**,rdoc/**
set list                  " Show whitespace
set noswapfile            " Swap files annoy me.
set textwidth=200
set colorcolumn=+4        " Stick with short lines.
set encoding=utf-8
set splitright            " Make new vsplits
set splitbelow            " Make new horiz splits open below current buffer

" Column color
" highlight ColorColumn ctermbg=1

" solarized set up 'iterm > profile > colors > presets = solarized dark'
syntax enable " Turn on syntax highlighting
call togglebg#map("bg")
set background=dark
colorscheme solarized
" let g:solarized_termcolors=256

" =-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
"KEY BINDINGS
" =-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
let mapleader=',' " set leader to ,

" format paragraphs (72 columns)
nnoremap ^^ {!}par w72qrg<CR>

" one-stroke window maximizing
nnoremap <C-H> <C-W>h<C-W><BAR>
nnoremap <C-L> <C-W>l<C-W><BAR>
nnoremap <C-J> <C-W>j<C-W>_
nnoremap <C-K> <C-W>k<C-W>_

" quick buffer switching
nnoremap <leader>[ :bprevious<CR>
nnoremap <leader>] :bnext<CR>

" shortcut to strip trailing whitespace
vnoremap <leader>s :s/\s\+$//g<CR>

" retab the document (tabs to spaces)
nnoremap <silent> <leader><S-t> :retab!<CR>

" <leader>e to edit files
nnoremap <leader>e :e **/
cnoremap <leader>e **/

" keep selections when indenting in visual mode
xnoremap > >gv
xnoremap < <gv

" Split a line with CTRL-J
nnoremap <NL> i<CR><ESC>

" Remap the 'kj' keyboard input whilst in Insert mode to switch to Normal mode
" This is a handy way to go back to Normal mode without reaching for the <Esc>
" key and there aren't many english words that have 'k' and 'j' used next to
" each other.
inoremap kj <Esc>

" Use ag instead of ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"EDITING OPTIONS
set number "show absolute number for the active line"
" set relativenumber " relative line numbers for movement(toggle with <C>-n)
set showbreak=+ " display a + at the beginning of a wrapped line
set showmatch   " flash the matching bracket on inserting a )]} etc

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set softtabstop=2 " most of the time, we want a softtabstop of 2
set tabstop=2     " show tabs with 2 spaces
set shiftwidth=2  " shift by 2 spaces when using >> and <<, etc
set expandtab     " no tabs
set autoindent

" Using autocmd for this allows it to be reset every time you open a
" file, which keeps overrides from being persistent
" augroup set_file_tab
"   au!
"  au FileType * set softtabstop=2 shiftwidth=2 tabstop=2 expandtab
" augroup END

set list                     " show whitespace
set listchars=tab:Â»Â·,trail:Â· " show tabs and trailing spaces
set listchars+=extends:Â»     " show a Â» when a line goes off the right edge of
set listchars+=precedes:Â«    " show a Â« when a line goes off the left edge of

"FOLDING OPTIONS
set foldenable       " enable folding
set foldlevelstart=0 " start with all folds collapsed when switching buffers
set foldcolumn=2     " adds two columns of fold status on the left-hand side of

"SEARCH OPTIONS
set ignorecase " makes search patterns case-insensitive by default
set smartcase  " overrides ignorecase when the pattern contains upper-case
set incsearch

"SWAP & UNDO OPTIONS
" global swapfile directory
set directory=~/.vim/swapfiles,/var/tmp,/tmp,.
" persistent undo
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/undofiles,/var/tmp,/tmp,.
endif

"FILETYPE OPTIONS
" use filetype plugins to determine indent settings
filetype plugin indent on

" ruby and yaml indentation
augroup indent_by_type
  au!
  autocmd FileType ruby,rdoc,cucumber,yaml,html,eruby set softtabstop=2 shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead Gemfile     setfiletype ruby
  autocmd BufNewFile,BufRead config.ru   setfiletype ruby
  autocmd BufNewFile,BufRead *.jst       setfiletype eruby.html
  autocmd BufNewFile,BufRead *.rl        setfiletype ragel
augroup END

" markdown files
augroup markdown
  au!
  autocmd BufRead,BufNewFile *.mkd,*.markdown,*.md,*.mdown,*.mkdn set softtabstop=4 shiftwidth=4 tabstop=4
  autocmd BufRead,BufNewFile *.mkd,*.markdown,*.md,*.mdown,*.mkdn set noexpandtab
augroup END

" set filetype on config files
augroup set_config_file_type
  au!
  autocmd BufNewFile,BufRead ~/.vim/* setfiletype vim
augroup END

set ruler          " shows cursor position in the lower right
set showcmd        " shows incomplete command to the left of the ruler
set winminheight=0 " allow windows to be 0 lines tall
set winminwidth=0  " allow windows to be 0 lines wide
set laststatus=2   " always show statusline

" set up statusline, ends up looking like this:
"   [1] window.vimrc [Preview] [vim,+]            @ L22 C51 (66%)(14)
set statusline=
set statusline+=%n:\                      " buffer number
set statusline+=%f                        " filename
set statusline+=%<                        " truncate here if necessary
set statusline+=%10w                      " displays [Preview] if it is
set statusline+=\ [                       " fix spacing, open bracket
set statusline+=%{strlen(&ft)?&ft:'none'} " filetype
set statusline+=%M                        " + if modified, - if r/o
set statusline+=]                         " close bracket
set statusline+=%=                        " right-align remainder
set statusline+=@\ L%l\ C%c\ (%P)(%L)\    " position in file and number of lines

" Ctrlp
nnoremap <leader>. :CtrlP<cr>
nnoremap <leader>/ :CtrlPTag<cr>

let g:ctrlp_follow_symlinks=1
let g:ctrlp_working_path_mode='wa'

 " Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
 if executable('ag')
   " Use Ag over Grep
   set grepprg=ag\ --nogroup\ --nocolor

   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

   " let g:ctrlp_use_caching = 0
 endif

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git|\.yardoc|public|log|tmp|node_modules|vendor$\',
  \ 'file': '\*.so|\*.dat|\.DS_Store|*.zip|*.swp$\'
  \ }

" TagBar
nnoremap <leader>t :TagbarToggle<CR>

"=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
"Extras, for testing out possible canidates
"=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=--=-=-=-=-=-=-=-
" Toggle relative number

" nnoremap <silent><leader>n :set rnu! rnu?<cr>

" augroup rnu_insert
"   autocmd InsertEnter * :set nornu
"   autocmd InsertLeave * :set rnu
" augroup END

" auto cmd group to source .vimrc if change occurrs
augroup watchvimrc
  au!
  au BufWritePost .vimrc so $MYVIMRC
augroup END

" slime for copying vim text to irb
let g:slime_target = "tmux"

" Break line by comma
let @c="f,wi"

" Break xml lines
let @x="wf<i"

" Fireplace
au Filetype clojure nmap <c-c><c-k> :Require<cr>

" Rainbow Parentheses
" autocmd VimEnter * RainbowParenthesesToggle
" autocmd Syntax clojure RainbowParenthesesLoadRound
" autocmd Syntax clojure RainbowParenthesesLoadSquare
" autocmd Syntax clojure RainbowParenthesesLoadBraces

" luochen1990/rainbow
let g:rainbow_active = 1

let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'ruby': ['rubocop']
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\}

let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1

" Bash Support
let g:BASH_Excutable='/bin/zsh'
